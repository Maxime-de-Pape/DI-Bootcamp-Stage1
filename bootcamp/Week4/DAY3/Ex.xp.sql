-- üåü Exercise 1: DVD Rental
-- Instructions
-- Get a list of all film languages.
-- SELECT name FROM language;
--
-- Get a list of all films joined with their languages ‚Äì select the following details : film title, description, and language name. Try your query with different joins:
-- Get all films, even if they don‚Äôt have languages.
-- Get all languages, even if there are no films in those languages.
-- SELECT film.title, film.description, language.name
-- FROM film
-- LEFT JOIN language ON film.language_id = language.language_id;

-- Create a new table called new_film with the following columns : id, name. Add some new films to the table.
-- Create the new_film table
-- CREATE TABLE new_film (
--   id SERIAL PRIMARY KEY,
--   title VARCHAR(300)
-- );
--
-- INSERT INTO new_film (name)
-- VALUES ('Green Mile'), ('Forrest Gump'), ('Tenet');
--
-- );
-- INSERT INTO new_film (name)
-- VALUES ('Green Mile'), ('Forrest Gump'), ('Tenet');

-- Create a new table called customer_review, which will contain film reviews that customers will make.
-- Think about the DELETE constraint: if a film is deleted, its review should be automatically deleted.
-- It should have the following columns:
-- review_id ‚Äì a primary key, non null, auto-increment.
-- film_id ‚Äì references the new_film table. The film that is being reviewed.
-- language_id ‚Äì references the language table. What language the review is in.
-- title ‚Äì the title of the review.
-- score ‚Äì the rating of the review (1-10).
-- review_text ‚Äì the text of the review. No limit on the length.
-- last_update ‚Äì when the review was last updated.
-- CREATE TABLE customer_review (
--   review_id SERIAL PRIMARY KEY,
--   film_id INT,
--   FOREIGN KEY (film_id) REFERENCES film (film_id) ON DELETE SET NULL,
--   language_id SMALLINT,
--   FOREIGN KEY (language_id) REFERENCES language(language_id),
--   title VARCHAR(200),
--   score INT,
--   review_text VARCHAR(500),
--   last_update DATE
-- );


-- Add 2 movie reviews. Make sure you link them to valid objects in the other tables.
-- INSERT INTO customer_review (film_id, language_id, title, score, review_text, last_update)
-- VALUES (1, 1, 'Great Film', 9, 'I really enjoyed watching this film. Highly recommended!', CURRENT_TIMESTAMP),
--        (2, 2, 'Disappointing', 4, 'The film didn't meet my expectations. Not recommended.', CURRENT_TIMESTAMP);

-- Delete a film that has a review from the new_film table, what happens to the customer_review table?
-- DELETE FROM film WHERE film_id = 1





-- üåü Exercise 2 : DVD Rental
-- Instructions
-- Use UPDATE to change the language of some films. Make sure that you use valid languages.
-- UPDATE film
-- SET language_id = (SELECT language_id FROM language WHERE name = 'Spanish')
-- WHERE film_id IN (
--   SELECT film_id
--   FROM film
--   WHERE language_id = (SELECT language_id FROM language WHERE name = 'English')
--   LIMIT 5
-- );
-- Which foreign keys (references) are defined for the customer table? How does this affect the way in which we INSERT into the customer table?
-- FOREIGN KEY (store_id) REFERENCES store(store_id),
-- We created a new table called customer_review. Drop this table. Is this an easy step, or does it need extra checking?
-- DROP TABLE customer_review;
-- Find out how many rentals are still outstanding (ie. have not been returned to the store yet).
-- SELECT COUNT(*)
-- FROM rental
-- WHERE return_date IS NULL;
-- Find the 30 most expensive movies which are outstanding (ie. have not been returned to the store yet)
-- SELECT film.title, film.rental_rate
-- FROM film
-- JOIN inventory ON film.film_id = inventory.film_id
-- JOIN rental ON inventory.inventory_id = rental.inventory_id
-- WHERE rental.return_date IS NULL
-- ORDER BY film.rental_rate DESC
-- LIMIT 30;
-- Your friend is at the store, and decides to rent a movie. He knows he wants to see 4 movies, but he can‚Äôt remember their names. Can you help him find which movies he wants to rent?
-- SELECT film.title
-- The 1st film : The film is about a sumo wrestler, and one of the actors is Penelope Monroe.
-- SELECT film.title
-- FROM film
-- JOIN film_actor ON film.film_id = film_actor.film_id
-- JOIN actor ON film_actor.actor_id = actor.actor_id
-- WHERE actor.first_name = 'Penelope' AND actor.last_name = 'Monroe' AND film.description LIKE '%sumo%';

-- The 2nd film : A short documentary (less than 1 hour long), rated ‚ÄúR‚Äù.
-- SELECT film.title
-- FROM film
-- WHERE film.length < 60 AND film.rating = 'R';
-- The 3rd film : A film that his friend Matthew Mahan rented. He paid over $4.00 for the rental, and he returned it between the 28th of July and the 1st of August, 2005.
-- SELECT film.title
-- FROM film
-- JOIN inventory ON film.film_id = inventory.film_id
-- JOIN rental ON inventory.inventory_id = rental.inventory_id
-- JOIN customer ON rental.customer_id = customer.customer_id
-- WHERE customer.first_name = 'Matthew' AND customer.last_name = 'Mahan' AND rental.rental_date BETWEEN '2005-07-28' AND '2005-08-01' AND rental.rental_rate > 4.00;
-- The 4th film : His friend Matthew Mahan watched this film, as well. It had the word ‚Äúboat‚Äù in the title or description, and it looked like it was a very expensive DVD to replace.
-- SELECT film.title
-- FROM film
-- JOIN inventory ON film.film_id = inventory.film_id
-- JOIN rental ON inventory.inventory_id = rental.inventory_id
-- JOIN customer ON rental.customer_id = customer.customer_id
-- WHERE customer.first_name = 'Matthew' AND customer.last_name = 'Mahan' AND (film.title LIKE '%boat%' OR film.description LIKE '%boat%') AND film.replacement_cost > 20.00;
